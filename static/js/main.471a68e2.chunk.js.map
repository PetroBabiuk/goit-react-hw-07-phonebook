{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/actions.js","redux/reducer.js","redux/store.js","services/contactshelf-api.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","addContactRequest","addContactSuccess","addContactError","changeFilter","entities","createReducer","contactsActions","_","payload","state","filter","id","isLoading","error","combineReducers","store","configureStore","reducer","phoneBook","phoneBookReducer","devTools","process","fetchContacts","a","axios","get","data","postContact","contact","post","name","number","deleteContact","contactId","delete","defaults","baseURL","getContacts","getFilter","ContactForm","useState","setName","setNumber","contacts","useSelector","contactsSelectors","dispatch","useDispatch","nameInputId","shortid","generate","numberInputId","handleChange","evt","currentTarget","value","reset","onSubmit","preventDefault","map","toLocaleLowerCase","includes","alert","contactShelfAPI","contactsOperations","className","s","form","label","htmlFor","input","type","pattern","title","required","onChange","button","Filter","inputId","labeltId","e","target","ContactListItem","onDelete","item","onClick","ContactList","useEffect","filteredContacts","allContacts","normalizedFilter","getVisibleContacts","onDeleteContact","list","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.471a68e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","import { createAction } from '@reduxjs/toolkit';\n\n////////////////////////     FETCH CONTACTS     //////////////////////////////////////\n\n// pending\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\n// fulfilled\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\n// rejected\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\n////////////////////////     DELETE CONTACT    //////////////////////////////////////\n\n// pending\nexport const deleteContactRequest = createAction('phoneBook/deleteContactRequest');\n// fulfilled\nexport const deleteContactSuccess = createAction('phoneBook/deleteContactSuccess');\n// rejected\nexport const deleteContactError = createAction('phoneBook/deleteContactError');\n\n////////////////////////     ADD CONTACT //////////////////////////////////////\n\n// pending\nexport const addContactRequest = createAction('phoneBook/addContactRequest');\n// fulfilled\nexport const addContactSuccess = createAction('phoneBook/addContactSuccess');\n// rejected\nexport const addContactError = createAction('phoneBook/addContactError');\n\n////////////////////////     CHANGE FILTER    //////////////////////////////////////\n\nexport const changeFilter = createAction('phoneBook/changeFilter');","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport * as contactsActions from './actions';\n\nconst entities = createReducer([], {\n    [contactsActions.fetchContactsSuccess]: (_, { payload }) => payload,\n    [contactsActions.addContactSuccess]: (state, { payload }) => [payload, ...state],\n    [contactsActions.deleteContactSuccess]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n    [contactsActions.fetchContactsRequest]: () => true,\n    [contactsActions.fetchContactsSuccess]: () => false,\n    [contactsActions.fetchContactsError]: () => false,\n\n    [contactsActions.deleteContactRequest]: () => true,\n    [contactsActions.deleteContactSuccess]: () => false,\n    [contactsActions.deleteContactError]: () => false\n})\n\nconst error = createReducer(null, {\n    [contactsActions.fetchContactsError]: (_, { payload }) => payload,\n    [contactsActions.fetchContactsRequest]: () => null,\n\n    [contactsActions.deleteContactError]: (_, { payload }) => payload,\n    [contactsActions.deleteContactRequest]: () => null,\n})\n\nconst filter = createReducer('', {\n    [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n    entities,\n    filter,\n    isLoading,\n    error,\n});","import { configureStore } from \"@reduxjs/toolkit\";\nimport phoneBookReducer from './reducer';\n\nexport const store = configureStore({\n    reducer: {\n        phoneBook: phoneBookReducer,\n    },\n    devTools: process.env.NODE_ENV === 'development',\n});","import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3001';\n\nexport async function fetchContacts() {\n    const { data } = await axios.get('/contacts');\n    return data;\n}\n\nexport async function postContact(contact) {\n    return await axios.post('/contacts', {\n        name: contact.name,\n        number: contact.number\n    });\n}\n\nexport async function deleteContact(contactId) {\n    return await axios.delete(`/contacts/${contactId}`);\n}\n\nexport async function fetchContactById(contactId) {\n    const { data } = await axios.get(`/contacts/${contactId}`);\n    return data;\n}","import * as contactShelfAPI from '../services/contactshelf-api'\nimport * as contactsActions from './actions';\n\nexport const fetchContacts = () => async dispatch => {\n    dispatch(contactsActions.fetchContactsRequest());\n\n    try {\n        const contacts = await contactShelfAPI.fetchContacts();\n        dispatch(contactsActions.fetchContactsSuccess(contacts));\n    } catch (error) {\n        dispatch(contactsActions.fetchContactsError(error));\n    }\n};\n\nexport const deleteContact = (id) => async dispatch => {\n    dispatch(contactsActions.deleteContactRequest(id));\n    try {\n        await contactShelfAPI.deleteContact(id);\n        dispatch(contactsActions.deleteContactSuccess(id));\n    } catch (error) {\n        dispatch(contactsActions.deleteContactError(error));\n    }\n}\n\nexport const addContact = (name, number) => async dispatch => {\n    dispatch(contactsActions.addContactRequest());\n    try {\n        const {data} = await contactShelfAPI.postContact({\n            name,\n            number,\n        });\n        dispatch(contactsActions.addContactSuccess(data));\n    } catch (error) {\n        dispatch(contactsActions.addContactError(error));\n    }\n}\n\nexport const changeFilter = (value) => dispatch => {\n    dispatch(contactsActions.changeFilter(value));\n}","export const getContacts = (state) => state.phoneBook.entities;\nexport const getFilter = (state) => state.phoneBook.filter;","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport shortid from 'shortid';\nimport * as contactsOperations from '../../redux/operations';\nimport * as contactsSelectors from '../../redux/selectors';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const dispatch = useDispatch();\n\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n\n    const handleChange = (evt) => {\n        const { name, value } = evt.currentTarget;\n\n        if (name === 'name') {\n            setName(value);\n        } else if (name === 'number') {\n            setNumber(value);\n        };\n    }\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        const foundNames = contacts.map(({ name }) => name.toLocaleLowerCase());\n        if (foundNames.includes(name.toLocaleLowerCase())) {\n            alert(`${name} is already in contacts`);\n        } else {\n            dispatch(contactsOperations.addContact(name, number));\n            reset();\n        }\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label} htmlFor={nameInputId}>Name</label>\n            <input\n                className={s.input}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                id={nameInputId}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                onChange={handleChange}\n            />\n\n            <label className={s.label} htmlFor={numberInputId}>Number</label>\n            <input\n                className={s.input}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                id={numberInputId}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                onChange={handleChange}\n            />\n                \n            <button\n                className={s.button}\n                type=\"submit\"\n            >\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nexport default ContactForm;","import { useSelector, useDispatch } from 'react-redux';\nimport shortid from 'shortid';\nimport * as contactsOperations from '../../redux/operations';\nimport * as contactsSelectors from '../../redux/selectors';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n    const filter = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n\n    const inputId = shortid.generate();\n    const labeltId = shortid.generate();\n\n    const onChange = (e) => dispatch(contactsOperations.changeFilter(e.target.value));\n\n    return (\n    <>\n        <div className={s.form}>\n            <label htmlFor={labeltId} className={s.label}> Find contacts by name</label>\n            <input className={s.input} id={inputId} type=\"text\" value={filter} onChange={onChange}/>\n        </div>\n    </>\n    )\n}    \n\nexport default Filter;","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactListItem = ({ name, number, onDelete }) => (\n    <li className={s.item}>\n        <span>{name}:</span>\n        <span>{number}</span>\n        <button type=\"button\" onClick={onDelete}>Delete</button>\n    </li>\n\n);\n\nContactListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/operations';\nimport * as contactsSelectors from '../../redux/selectors';\nimport ContactListItem from './ContactListItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const filter = useSelector(contactsSelectors.getFilter);\n\n    \n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n    \n    \n    const getVisibleContacts = (allContacts, filter) => {\n        const normalizedFilter = filter.toLocaleLowerCase();\n        return allContacts.filter(({ name }) =>\n        name.toLocaleLowerCase().includes(normalizedFilter));\n    };\n    \n    const filteredContacts = getVisibleContacts(contacts, filter);\n\n    const onDeleteContact = (id) => {\n        dispatch(contactsOperations.deleteContact(id));\n    };\n\n    return (\n        filteredContacts && (<ul className={s.list}>\n            {filteredContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    onDelete={() => onDeleteContact(id)}\n                />\n            ))}\n        \n        </ul>)\n    );\n}\n\nexport default ContactList;","import './App.css';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => (\n    <div>\n      <h1 className=\"text\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"text\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n\nexport default (App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {store} from './redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};"],"sourceRoot":""}